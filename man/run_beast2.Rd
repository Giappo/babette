% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_beast2.R
\name{run_beast2}
\alias{run_beast2}
\title{Do a full BEAST2 run}
\usage{
run_beast2(fasta_filenames,
  site_models = beautier::create_jc69_site_models(beautier::get_ids(fasta_filenames)),
  clock_models = beautier::create_strict_clock_models(beautier::get_ids(fasta_filenames)),
  tree_priors = beautier::create_yule_tree_priors(beautier::get_ids(fasta_filenames)),
  mcmc = beautier::create_mcmc(), posterior_crown_age = NA,
  beast2_input_filename = "beast2.xml",
  beast2_output_log_filename = "beast2.log",
  beast2_output_trees_filenames = paste0(beautier::get_ids(fasta_filenames),
  ".trees"), beast2_output_state_filename = "beast2.xml.state",
  beast_jar_path = "~/Programs/beast/lib/beast.jar", verbose = FALSE,
  cleanup = TRUE)
}
\arguments{
\item{fasta_filenames}{one or more FASTA filename, eachwith one alignment}

\item{site_models}{one or more site models,
see \link[beautier]{create_site_models}}

\item{clock_models}{one or more clock models,
see \link[beautier]{create_clock_models}}

\item{tree_priors}{one or more tree priors,
see \link[beautier]{create_tree_priors}}

\item{mcmc}{the MCMC options,
see \link[beautier]{create_mcmc}}

\item{posterior_crown_age}{the posterior's crown age. Use NA to let
BEAST2 estimate this parameter. Use a positive value to fix the
crown age to that value}

\item{beast2_input_filename}{name of the BEAST2 configuration file}

\item{beast2_output_log_filename}{name of the log file created by BEAST2,
containing the parameter estimates in time}

\item{beast2_output_trees_filenames}{name of the one or more trees
files created by BEAST2, one per alignment}

\item{beast2_output_state_filename}{name of the final state file created
by BEAST2, containing the operator acceptences}

\item{beast_jar_path}{path to the BEAST2 jar file}

\item{verbose}{set to TRUE for more output}

\item{cleanup}{set to FALSE to keep all temporary files}
}
\description{
Do a full BEAST2 run
}
\examples{
 # One alignment
 out <- run_beast2(
   fasta_filenames = get_path("anthus_aco.fas"),
   mcmc = create_mcmc(chain_length = 10000, store_every = 1000)
 )

 testit::assert("estimates" \%in\% names(out))
 testit::assert("anthus_aco_trees" \%in\% names(out))
 testit::assert("operators" \%in\% names(out))
 testit::assert(class(out$anthus_aco_trees[[1]]) == "phylo")
 testit::assert(length(out$anthus_aco_trees) == 10)

 testit::assert("Sample" \%in\% names(out$estimates))
 testit::assert("posterior" \%in\% names(out$estimates))
 testit::assert("likelihood" \%in\% names(out$estimates))
 testit::assert("prior" \%in\% names(out$estimates))
 testit::assert("treeLikelihood" \%in\% names(out$estimates))
 testit::assert("TreeHeight" \%in\% names(out$estimates))
 testit::assert("YuleModel" \%in\% names(out$estimates))
 testit::assert("birthRate" \%in\% names(out$estimates))

 testit::assert("operator" \%in\% names(out$operators))
 testit::assert("p" \%in\% names(out$operators))
 testit::assert("accept" \%in\% names(out$operators))
 testit::assert("reject" \%in\% names(out$operators))
 testit::assert("acceptFC" \%in\% names(out$operators))
 testit::assert("rejectFC" \%in\% names(out$operators))
 testit::assert("rejectIv" \%in\% names(out$operators))
 testit::assert("rejectOp" \%in\% names(out$operators))

 # Two alignments
 out <- run_beast2(
   fasta_filenames = get_paths(c("anthus_aco.fas", "anthus_nd2.fas")),
   mcmc = create_mcmc(chain_length = 10000, store_every = 1000)
 )

 testit::assert("estimates" \%in\% names(out))
 testit::assert("anthus_aco_trees" \%in\% names(out))
 testit::assert("anthus_nd2_trees" \%in\% names(out))
 testit::assert("operators" \%in\% names(out))
 testit::assert(class(out$anthus_aco_trees[[1]]) == "phylo")
 testit::assert(class(out$anthus_nd2_trees[[1]]) == "phylo")
 testit::assert(length(out$anthus_aco_trees) == 10)
 testit::assert(length(out$anthus_nd2_trees) == 10)

 testit::assert("Sample" \%in\% names(out$estimates))
 testit::assert("posterior" \%in\% names(out$estimates))
 testit::assert("likelihood" \%in\% names(out$estimates))
 testit::assert("prior" \%in\% names(out$estimates))
 testit::assert("treeLikelihood.aco" \%in\% names(out$estimates))
 testit::assert("treeLikelihood.nd2" \%in\% names(out$estimates))
 testit::assert("TreeHeight.aco" \%in\% names(out$estimates))
 testit::assert("TreeHeight.nd2" \%in\% names(out$estimates))
 testit::assert("YuleModel.aco" \%in\% names(out$estimates))
 testit::assert("YuleModel.nd2" \%in\% names(out$estimates))
 testit::assert("birthRate.aco" \%in\% names(out$estimates))
 testit::assert("birthRate.nd2" \%in\% names(out$estimates))
}
\seealso{
Use \code{\link[tracerer]{remove_burn_ins}} to remove the burn-ins from
  the posterior's estimates (\code{posterior$estimates})
}
\author{
Richel J.C. Bilderbeek
}
