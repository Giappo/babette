% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bbt_run.R
\name{bbt_run}
\alias{bbt_run}
\title{Do a full run: create a BEAST2 configuration file (like BEAUti 2),
run BEAST2, parse results (like Tracer)}
\usage{
bbt_run(fasta_filenames,
  site_models = beautier::create_jc69_site_models(beautier::get_alignment_ids(fasta_filenames)),
  clock_models = beautier::create_strict_clock_models(beautier::get_alignment_ids(fasta_filenames)),
  tree_priors = beautier::create_yule_tree_priors(beautier::get_alignment_ids(fasta_filenames)),
  mrca_priors = NA, mcmc = beautier::create_mcmc(),
  posterior_crown_age = NA, beast2_input_filename = tempfile(pattern =
  "beast2_", fileext = ".xml"), rng_seed = 1,
  beast2_output_log_filename = tempfile(pattern = "beast2_", fileext =
  "log"), beast2_output_trees_filenames = tempfile(pattern =
  paste0("beast2_", beautier::get_alignment_ids(fasta_filenames), "_"),
  fileext = ".trees"), beast2_output_state_filename = tempfile(pattern =
  "beast2_", fileext = ".xml.state"),
  beast2_jar_path = beastier::get_default_beast2_jar_path(),
  verbose = FALSE, cleanup = TRUE)
}
\arguments{
\item{fasta_filenames}{one or more FASTA filename, each with one alignment}

\item{site_models}{one or more site models,
see \link[beautier]{create_site_models}}

\item{clock_models}{one or more clock models,
see \link[beautier]{create_clock_models}}

\item{tree_priors}{one or more tree priors,
see \link[beautier]{create_tree_priors}}

\item{mrca_priors}{a list of one or more Most Recent Common Ancestor priors,
as returned by \code{\link{create_mrca_prior}}}

\item{mcmc}{the MCMC options,
see \link[beautier]{create_mcmc}}

\item{posterior_crown_age}{the posterior's crown age. Use NA to let
BEAST2 estimate this parameter. Use a positive value to fix the
crown age to that value}

\item{beast2_input_filename}{path of the BEAST2 configuration file.
By default, this file is put in a temporary folder with a random
filename, as the user needs not read it: it is used as input of BEAST2.
Specifying a \code{beast2_input_filename} allows to store that file
in a more permanently stored location.}

\item{rng_seed}{the random number generator seed. Must be either
\code{NA} or a positive non-zero value. An RNG seed of \code{NA}
results in BEAST2 picking a random seed.}

\item{beast2_output_log_filename}{name of the log file created by BEAST2,
containing the parameter estimates in time. By default, this
file is put a temporary folder with a random
filename, as the user needs not read it: its content
is parsed and returned by this function.
Specifying a \code{beast2_output_log_filename} allows to store that file
in a more permanently stored location.}

\item{beast2_output_trees_filenames}{name of the one or more trees
files created by BEAST2, one per alignment. By default, these
files are put a temporary folder with a random
filename, as the user needs not read it: their content
is parsed and returned by this function.
Specifying \code{beast2_output_trees_filenames} allows to store these
one or more files in a more permanently stored location.}

\item{beast2_output_state_filename}{name of the final state file created
by BEAST2, containing the operator acceptances. By default, this
file is put a temporary folder with a random
filename, as the user needs not read it: its content
is parsed and returned by this function.
Specifying a \code{beast2_output_state_filename} allows to store that file
in a more permanently stored location.}

\item{beast2_jar_path}{path to the BEAST2 jar file}

\item{verbose}{set to TRUE for more output}

\item{cleanup}{set to FALSE to keep all temporary files}
}
\value{
a list with the following elements:\cr
\itemize{
  \item{
    \code{estimates}: a data frame with BEAST2
    parameter estimates
  }
  \item{
    \code{[alignment_id]_trees}: a \code{multiPhylo}
    containing the phylogenies
    in the BEAST2 posterior. \code{[alignment_id]}
    is the ID of the alignment. For example,
    when running \code{bbt_run} with
    \code{anthus_aco.fas}, this element will have
    name \code{anthus_aco_trees}
  }
  \item{
    \code{operators}: a data frame with the
    BEAST2 MCMC operator acceptances
  }
}
}
\description{
Do a full run: create a BEAST2 configuration file (like BEAUti 2),
run BEAST2, parse results (like Tracer)
}
\examples{
 # One alignment
 out <- bbt_run(
   fasta_filenames = get_babette_path("anthus_aco.fas"),
   mcmc = create_mcmc(chain_length = 1000, store_every = 1000)
 )

 testit::assert("estimates" \%in\% names(out))
 testit::assert("anthus_aco_trees" \%in\% names(out))
 testit::assert("operators" \%in\% names(out))
 testit::assert(class(out$anthus_aco_trees[[1]]) == "phylo")
 testit::assert(length(out$anthus_aco_trees) == 2)

 testit::assert("Sample" \%in\% names(out$estimates))
 testit::assert("posterior" \%in\% names(out$estimates))
 testit::assert("likelihood" \%in\% names(out$estimates))
 testit::assert("prior" \%in\% names(out$estimates))
 testit::assert("treeLikelihood" \%in\% names(out$estimates))
 testit::assert("TreeHeight" \%in\% names(out$estimates))
 testit::assert("YuleModel" \%in\% names(out$estimates))
 testit::assert("birthRate" \%in\% names(out$estimates))

 testit::assert("operator" \%in\% names(out$operators))
 testit::assert("p" \%in\% names(out$operators))
 testit::assert("accept" \%in\% names(out$operators))
 testit::assert("reject" \%in\% names(out$operators))
 testit::assert("acceptFC" \%in\% names(out$operators))
 testit::assert("rejectFC" \%in\% names(out$operators))
 testit::assert("rejectIv" \%in\% names(out$operators))
 testit::assert("rejectOp" \%in\% names(out$operators))

 # Two alignments
 out <- bbt_run(
   fasta_filenames = get_babette_paths(
     c("anthus_aco.fas", "anthus_nd2.fas")
   ),
   mcmc = create_mcmc(chain_length = 1000, store_every = 1000)
 )

 testit::assert("estimates" \%in\% names(out))
 testit::assert("anthus_aco_trees" \%in\% names(out))
 testit::assert("anthus_nd2_trees" \%in\% names(out))
 testit::assert("operators" \%in\% names(out))
 testit::assert(class(out$anthus_aco_trees[[1]]) == "phylo")
 testit::assert(class(out$anthus_nd2_trees[[1]]) == "phylo")
 testit::assert(length(out$anthus_aco_trees) == 2)
 testit::assert(length(out$anthus_nd2_trees) == 2)

 testit::assert("Sample" \%in\% names(out$estimates))
 testit::assert("posterior" \%in\% names(out$estimates))
 testit::assert("likelihood" \%in\% names(out$estimates))
 testit::assert("prior" \%in\% names(out$estimates))
 testit::assert("treeLikelihood.aco" \%in\% names(out$estimates))
 testit::assert("treeLikelihood.nd2" \%in\% names(out$estimates))
 testit::assert("TreeHeight.aco" \%in\% names(out$estimates))
 testit::assert("TreeHeight.nd2" \%in\% names(out$estimates))
 testit::assert("YuleModel.aco" \%in\% names(out$estimates))
 testit::assert("YuleModel.nd2" \%in\% names(out$estimates))
 testit::assert("birthRate.aco" \%in\% names(out$estimates))
 testit::assert("birthRate.nd2" \%in\% names(out$estimates))
}
\seealso{
Use \code{\link[tracerer]{remove_burn_ins}}
  to remove the burn-ins from
  the posterior's estimates (\code{posterior$estimates})
}
\author{
Richel J.C. Bilderbeek
}
